package kddproject;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JButton;
import javax.swing.JFileChooser;

/**
 *
 * @author Manoj Acharya
 */
public class KddFrame extends javax.swing.JFrame {
    
    JFileChooser fc;
    static Scanner input;
    public static String attributeFilePath="";
    public static String dataFilePath="";
    public static List<String> attributeNames = new ArrayList<String>();
	public static List<String> stableAttributes = new ArrayList<String>();
	public static List<String> flexibleAttributes = new ArrayList<String>();
	public static KddFrame kdd;
	public static String decisionAttribute,decisionFrom,decisionTo;
	public static String userStableAttribute;
        public static int minConfidence=0,minSupport=0;
	public static StringBuilder sb = new StringBuilder();
	public static ArrayList<ArrayList<String>> data = new ArrayList<ArrayList<String>>(); 
	
	static Map<String, HashSet<String>> distinctAttributeValues = new HashMap<String, HashSet<String>>();
	static Map<HashSet<String>, HashSet<String>> attributeValues = new HashMap<HashSet<String>, HashSet<String>>();
	static Map<HashSet<String>, HashSet<String>> reducedAttributeValues = new HashMap<HashSet<String>, HashSet<String>>();
	static Map<String, HashSet<String>> decisionValues = new HashMap<String, HashSet<String>>();
	static Map<ArrayList<String>, HashSet<String>> markedValues = new HashMap<ArrayList<String>, HashSet<String>>();
	public static Map<ArrayList<String>,String> certainRules = new HashMap<ArrayList<String>,String>();
	public static Map<ArrayList<String>,HashSet<String>> possibleRules = new HashMap<ArrayList<String>,HashSet<String>>();

    /**
     * Creates new form NewJFrame
     */
    public KddFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    /*
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 914, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 493, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   */
    
        // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        attrBrowseBtn = new javax.swing.JButton();
        label4 = new java.awt.Label();
        dataBrowseBtn = new javax.swing.JButton();
        label5 = new java.awt.Label();
        supportTxtField = new java.awt.TextField();
        label6 = new java.awt.Label();
        confidenceTxtField = new java.awt.TextField();
        submitBtn = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        label7 = new java.awt.Label();
        label8 = new java.awt.Label();
        decisionValFrom = new java.awt.TextField();
        label9 = new java.awt.Label();
        decisionValTo = new java.awt.TextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        label10 = new java.awt.Label();
        label11 = new java.awt.Label();
        stableAttrs = new java.awt.TextField();
        attrValues = new java.awt.Label();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabelLoading = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kdd Project - Group 4: Action Rules ");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        label2.setText("Available Attributes are:");

        label3.setText("Please Select Attribute File");

        label3.setBackground(Color.ORANGE);
        attrBrowseBtn.setText("Browse");
        attrBrowseBtn.setActionCommand("");
        attrBrowseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attrBrowseBtnActionPerformed(evt);
            }
        });

        label4.setText("Please Select Data File ");

        dataBrowseBtn.setText("Browse");
        dataBrowseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataBrowseBtnActionPerformed(evt);
            }
        });

        label5.setText("Minimum Support");

        supportTxtField.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                supportTxtFieldTextValueChanged(evt);
            }
        });

        label6.setText("Minimum Confidence");

        confidenceTxtField.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                confidenceTxtFieldTextValueChanged(evt);
            }
        });

        submitBtn.setText("Load");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        label7.setText("Choose Decision Attribute");

        label8.setText("Decision Value From");

        decisionValFrom.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                decisionValFromTextValueChanged(evt);
            }
        });

        label9.setText("Decision Value To");

        decisionValTo.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                decisionValToTextValueChanged(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        label10.setText("Available Stable Attributes:");

        label11.setText("Enter Stable Attribute(s)");

        stableAttrs.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                stableAttrsTextValueChanged(evt);
            }
        });

        jButton1.setText("Generate Action Rules");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Submit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabelLoading.setText("Loading...");
        jLabelLoading.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 843, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(decisionValFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(decisionValTo, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(2, 2, 2)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(stableAttrs, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabelLoading)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(supportTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(attrBrowseBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(23, 23, 23)
                                                .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(37, 37, 37)
                                                .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(dataBrowseBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(confidenceTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(21, 21, 21)
                                        .addComponent(submitBtn)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addGap(266, 266, 266))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jButton2)
                                        .addGap(100, 100, 100)))))
                        .addGap(8, 8, 8)
                        .addComponent(attrValues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(attrBrowseBtn)
                            .addComponent(dataBrowseBtn)
                            .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(attrValues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(8, 8, 8)
                                    .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(supportTxtField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(confidenceTxtField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(submitBtn))
                .addGap(22, 22, 22)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(39, 39, 39))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(decisionValFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(decisionValTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(stableAttrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(56, 56, 56)
                                        .addComponent(jLabelLoading)))))
                        .addContainerGap(125, Short.MAX_VALUE))))
        );

        jLabelLoading.getAccessibleContext().setAccessibleName("jLabelLoading");

        pack();
    }// </editor-fold>                        

   
    private void attrBrowseBtnActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here
        fc = new JFileChooser();
        int returnValue = fc.showOpenDialog(KddFrame.this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
          File selectedFile = fc.getSelectedFile();
          attributeFilePath = selectedFile.getAbsolutePath();
          readAttributes();
    }              
        
    }                                             

    private void dataBrowseBtnActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
         fc = new JFileChooser();
        int returnValue = fc.showOpenDialog(KddFrame.this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
          File selectedFile = fc.getSelectedFile();
          dataFilePath = selectedFile.getAbsolutePath();
          readData();
    }            
    }                                             

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        //Read stable,flexible and decision attributes
                label2.setText("Available Attributes are:" +" "+attributeNames.toString());
                for(String attr:attributeNames){
                    jComboBox1.addItem(attr);
                }
		//setStableAttributes(attributeNames);
		
		//Find Certain and Possible rules
		
    }                                         

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        decisionAttribute = jComboBox1.getSelectedItem().toString();
    }                                          

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        setDecisionAttribute(attributeNames); 
        String[] flexArray = new String[flexibleAttributes.size()];
        for(int i=0;i<flexibleAttributes.size();i++){
            flexArray[i] = flexibleAttributes.get(i);
        }
            jList1.setListData(flexArray);
        jScrollPane1.setViewportView(jList1);
    }                                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        setStableAttributes(attributeNames);
        findRules();
    }                                        

    private void decisionValFromTextValueChanged(java.awt.event.TextEvent evt) {                                                 
        // TODO add your handling code here:
        decisionFrom = decisionValFrom.getText();
    }                                                

    private void decisionValToTextValueChanged(java.awt.event.TextEvent evt) {                                               
        // TODO add your handling code here:
        decisionTo = decisionValTo.getText();
    }                                              

    private void stableAttrsTextValueChanged(java.awt.event.TextEvent evt) {                                             
        // TODO add your handling code here:
        userStableAttribute = stableAttrs.getText();
    }                                            

    private void supportTxtFieldTextValueChanged(java.awt.event.TextEvent evt) {                                                 
        // TODO add your handling code here:
        minSupport = Integer.parseInt(supportTxtField.getText());
    }                                                

    private void confidenceTxtFieldTextValueChanged(java.awt.event.TextEvent evt) {                                                    
        // TODO add your handling code here:
        minConfidence = Integer.parseInt(confidenceTxtField.getText());
    } 
    /**
     * @param args the command line arguments
     */
    private JButton open = new JButton("Open");
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Kdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Kdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Kdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Kdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                kdd = new KddFrame();
                kdd.setVisible(true);
                kdd.getContentPane().setBackground(Color.WHITE);
                kdd.jLabelLoading.setVisible(false);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
//Reading attributes and data
	private static void readAttributes() {
        try {
            input = new Scanner(new File(attributeFilePath));
            
            while (input.hasNextLine()) {
                attributeNames.add(input.nextLine());
            }
            printList(attributeNames);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Kdd.class.getName()).log(Level.SEVERE, null, ex);
        }
		
	}
        
        private static void readData() {
		try {
			input = new Scanner(new File(dataFilePath));
			int lineNo = 0;
			
			while(input.hasNextLine()){
                                String nextLine = input.nextLine();
                                //System.out.println(nextLine);
                                String[] lineData;
                                if(nextLine.contains(",")){
                                    lineData = nextLine.split(",");
                                    System.out.println(lineData.toString());
                                }else{
                                     lineData = nextLine.split("\\s+");
                                }
				String key;
				
				lineNo++;
				ArrayList<String> tempList = new ArrayList<String>();
				HashSet<String> set;
                                //System.out.println(lineData.length);
                                //System.out.println(attributeNames.size());
				
				for (int i=0;i<lineData.length;i++) {
                                       // System.out.println(lineData.length);
                                        //System.out.println(attributeNames.size());
					String currentAttributeValue = lineData[i];
					String attributeName = attributeNames.get(i);
					key = attributeName + currentAttributeValue;
					
					tempList.add(key);

					HashSet<String> mapKey = new HashSet<String>();
					mapKey.add(key);
					setMap(attributeValues,lineData[i],mapKey,lineNo);
					
					if (distinctAttributeValues.containsKey(attributeName)) {
						set = distinctAttributeValues.get(attributeName);
						set.add(key);
						
					}else{
						set = new HashSet<String>();
					}
					
					set.add(key);
					distinctAttributeValues.put(attributeName, set);
				}
		
				data.add(tempList);
			}
                        for(ArrayList<String> dataList: data){
                             printList(dataList);
                        }
			                
			
		} catch (FileNotFoundException e) {
			printMessage("File Not Found");
			e.printStackTrace();
		}
	}
    
        private static void setMap(Map<HashSet<String>, HashSet<String>> values,
			String string, HashSet<String> key, int lineNo) {
		HashSet<String> tempSet;
		
		if (values.containsKey(key)) {
			tempSet = values.get(key);						
		}else{
			tempSet = new HashSet<String>();
		}
		
		tempSet.add("x"+lineNo);
		values.put(key, tempSet);
	}
        //Printing String, List and Map
	public static void printMessage(String content){
		System.out.println(content);
	}
        public static void printList(List<String> list){
		Iterator iterate = list.iterator();
		
		while(iterate.hasNext()){
			printMessage(iterate.next().toString());
		}
	}
	
	private static void printAttributeMap(Map<HashSet<String>, HashSet<String>> values) {
		for(Map.Entry<HashSet<String>, HashSet<String>> set : values.entrySet()){
			printMessage(set.getKey().toString() + " = " + set.getValue());
                        sb.append(set.getKey().toString() + " = " + set.getValue());
                        sb.append(System.lineSeparator());
		}
	}
	
	private static void printCertainRulesMap(Map<ArrayList<String>, String> value) {
          kdd.jLabelLoading.setText("Generating Certain Rules");
          kdd.jLabelLoading.setVisible(true);
            printMessage("\nCertain Rules:");
                sb.append(System.lineSeparator());
                sb.append("Certain Rules:");
                Iterator iterator = value.entrySet().iterator();
                while(iterator.hasNext()){
                    Map.Entry set = (Map.Entry)iterator.next();
                    	int support = calculateLERSSupport((ArrayList<String>)set.getKey(),(String)set.getValue());
			String confidence = calculateLERSConfidence((ArrayList<String>)set.getKey(),(String)set.getValue());
                        System.out.println(minConfidence+" minConfidence "+minSupport+" minSupport ");
                        sb.append(minConfidence+" minConfidence "+minSupport+" minSupport ");
                        sb.append(System.lineSeparator());
			if(Integer.parseInt(confidence) >= minConfidence && support >= minSupport){
                            printMessage(set.getKey().toString() + " -> " + set.getValue() + "[Support:-" + support + ", Confidence:-" + confidence +"%]");
                            sb.append(set.getKey().toString() + " -> " + set.getValue() + "[Support:-" + support + ", Confidence:-" + confidence +"%]");
                            sb.append(System.lineSeparator());
                        }else{
                        iterator.remove();
                        }
                    
                }
	}
	
	private static void printPossibleRulesMap(Map<ArrayList<String>, HashSet<String>> value) {
		 kdd.jLabelLoading.setText("Generating Possible Rules");
                 kdd.jLabelLoading.setVisible(true);
		if(!value.isEmpty()){
			printMessage("\nPossible Rules:");
                        sb.append(System.lineSeparator());
                        sb.append("Possible Rules:");
                        sb.append(System.lineSeparator());
                         Iterator iterator = value.entrySet().iterator();
                          while(iterator.hasNext()){
                            Map.Entry set = (Map.Entry)iterator.next();
                            Iterator<String> setIterator = ((HashSet<String>)set.getValue()).iterator();
                                        while(setIterator.hasNext()){
                                        String possibleValue = setIterator.next();
                                        int support = calculateLERSSupport((ArrayList<String>)set.getKey(),possibleValue);
					String confidence = calculateLERSConfidence((ArrayList<String>)set.getKey(),possibleValue);
					
                                        if(Integer.parseInt(confidence) >= minConfidence && support >= minSupport){
                                        printMessage(set.getKey().toString() + " -> " + possibleValue + "[Support:-" + support + ", Confidence:-" + confidence +"%]");
                                        sb.append(set.getKey().toString() + " -> " + possibleValue + "[Support:-" + support + ", Confidence:-" + confidence +"%]");
                                        sb.append(System.lineSeparator());
                                        }else{
                                           setIterator.remove();
                                        }
                          }
                          }
		}
	}

	private static int findLERSSupport(ArrayList<String> tempList) {
		int count = 0;
		
		for(ArrayList<String> data : data){	
			if(data.containsAll(tempList))
				count++;
		}
		
		return count;
	}
	
	private static int calculateLERSSupport(ArrayList<String> key, String value) {
		ArrayList<String> tempList = new ArrayList<String>();
		
		for(String val : key){
			tempList.add(val);
		}
		
		if(!value.isEmpty())
			tempList.add(value);
	
		return findLERSSupport(tempList);
		
	}


	private static String calculateLERSConfidence(ArrayList<String> key,
			String value) {
		int num = calculateLERSSupport(key, value);
		int den = calculateLERSSupport(key, "");
                int confidence = 0;
                if(den!=0){
                 confidence = (num * 100)/den;   
                }
		
		return String.valueOf(confidence);
	}
        
        private static void findRules() {
		int loopCount = 0;
		
		while(!attributeValues.isEmpty()){
			printMessage("\nLoop " + (++loopCount) +":");
                        sb.append(System.lineSeparator());
                        sb.append("Loop " + loopCount + ":" );
			printMessage("--------------------------");
                        sb.append("--------------------------");
			printAttributeMap(attributeValues);
			
			for (Map.Entry<HashSet<String>, HashSet<String>> set : attributeValues.entrySet()) {
				ArrayList<String> setKey = new ArrayList<String>();
				setKey.addAll(set.getKey());
				
				if (set.getValue().isEmpty()) {
					continue;
				}else{
					for(Map.Entry<String, HashSet<String>> decisionSet : decisionValues.entrySet()){
						if(decisionSet.getValue().containsAll(set.getValue())){
							certainRules.put(setKey, decisionSet.getKey());
							markedValues.put(setKey, set.getValue());
							break;
						}
					}
				}
				
				if(!markedValues.containsKey(setKey)){
					HashSet<String> possibleRulesSet = new HashSet<String>();
					for(Map.Entry<String, HashSet<String>> decisionSet : decisionValues.entrySet()){
						possibleRulesSet.add(decisionSet.getKey());
					}
					possibleRules.put(setKey, possibleRulesSet);
				}
				
			}
			
			removeMarkedValues();
			
			printCertainRulesMap(certainRules);
			printPossibleRulesMap(possibleRules);
                    try {
                        writeFile(sb.toString());
                    } catch (IOException ex) {
                        Logger.getLogger(Kdd.class.getName()).log(Level.SEVERE, null, ex);
                    }
			combinePossibleRules();
		}
          //       generateActionRules();
	}

	private static void removeMarkedValues() {
		for(Map.Entry<ArrayList<String>, HashSet<String>> markedSet : markedValues.entrySet()){
			attributeValues.remove(new HashSet<String>(markedSet.getKey()));
		}
		
	}
	
	private static void combinePossibleRules() {
		Set<ArrayList<String>> keySet = possibleRules.keySet();
		ArrayList<ArrayList<String>> keyList = new ArrayList<ArrayList<String>>();
		keyList.addAll(keySet);
		
		for(int i = 0;i<possibleRules.size();i++){
			for(int j = (i+1);j<possibleRules.size();j++){
				HashSet<String> combinedKeys = new HashSet<String>(keyList.get(i));
				combinedKeys.addAll(new HashSet<String>(keyList.get(j)));
				
				if(!checkSameGroup(combinedKeys)){
					combineAttributeValues(combinedKeys);
				}
			}
		}
		
		possibleRules.clear();
		
		removeRedundantValues();
		clearAttributeValues();
              		
	}

	private static boolean checkSameGroup(HashSet<String> combinedKeys) {
		for(Map.Entry<String, HashSet<String>> singleAttribute : distinctAttributeValues.entrySet()){
			if(singleAttribute.getValue().containsAll(combinedKeys)){
				return true;
			}
		}
		
		return false;
	}
	
	private static void combineAttributeValues(HashSet<String> combinedKeys) {
		HashSet<String> combinedValues = new HashSet<String>();
			
		for(Map.Entry<HashSet<String>, HashSet<String>> attributeValue : attributeValues.entrySet()){
			if(combinedKeys.containsAll(attributeValue.getKey())){
				if(combinedValues.isEmpty()){
					combinedValues.addAll(attributeValue.getValue());
				}else{
					combinedValues.retainAll(attributeValue.getValue());
				}
			}
		}
		reducedAttributeValues.put(combinedKeys, combinedValues);
	
	}

	private static void removeRedundantValues() {
		HashSet<String> mark = new HashSet<String>();
		
		for(Map.Entry<HashSet<String>, HashSet<String>> reducedAttributeValue : reducedAttributeValues.entrySet()){
			for(Map.Entry<HashSet<String>, HashSet<String>> attributeValue : attributeValues.entrySet()){
				
				if(attributeValue.getValue().containsAll(reducedAttributeValue.getValue()) || reducedAttributeValue.getValue().isEmpty()){
					mark.addAll(reducedAttributeValue.getKey());
				}
			}
		}
		
		reducedAttributeValues.remove(mark);
		
		
	}
	
	private static void clearAttributeValues() {
		 attributeValues.clear();
		 for(Map.Entry<HashSet<String>, HashSet<String>> reducedAttributeValue : reducedAttributeValues.entrySet()){
			 attributeValues.put(reducedAttributeValue.getKey(), reducedAttributeValue.getValue());
		 }
		 reducedAttributeValues.clear();
	}
 private static void generateActionRules() {
        try {
            String rule = "";
            int loop1Count = 0;
            System.out.println(stableAttributes.toString());
            PrintWriter writer = new PrintWriter("ActionRules.txt", "UTF-8");
            for (Map.Entry<ArrayList<String>, String> certainRules1 : certainRules
                    .entrySet()) {
                loop1Count++;
                if (certainRules1.getValue().equals(decisionFrom)) {
                    int loop2Count = 0;
                    for (Map.Entry<ArrayList<String>, String> certainRules2 : certainRules
                            .entrySet()) {
                        System.out.println(certainRules2.getKey().equals(certainRules1.getKey()));
                        if ((!certainRules2.getValue().equals(decisionTo))) {
                            continue;
                        } else {
                            String primeAttribute = "";
                            
                            ArrayList<String> checkCertainValues1 = certainRules1
                                    .getKey();
                            for (String value1 : checkCertainValues1) {
                                
                                if (stableAttributes.contains(value1)) {
                                    continue;
                                } else {
                                    primeAttribute = checkAttribute(value1);
                                    
                                    ArrayList<String> checkCertainValues2 = certainRules2
                                            .getKey();
                                    for (String value2 : checkCertainValues2) {
                                        
                                        if (stableAttributes.contains(value2)
                                                || !(checkAttribute(value2)
                                                        .equals(primeAttribute))) {
                                            rule = formRule(rule, value2, value2);
                                            
                                        } else if (checkAttribute(value2).equals(
                                                primeAttribute)) {
                                            
                                            rule = formRule(rule, value1, value2);
                                        }
                                        
                                    }
                                }
                            }
                            
                            if (rule.indexOf(primeAttribute) != -1
                                    && !primeAttribute.isEmpty()) {
                                    writer.println("The first line");
                                    writer.println("The second line");
                                    writer.println(rule + " ==> " +decisionFrom + "->" + decisionTo);
                                System.out.println(rule + " ==> " +decisionFrom + "->" + decisionTo);
                            }
                            rule = "";
                        }
                        loop2Count++;
                    }
                } else {
                    continue;
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Kdd.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Kdd.class.getName()).log(Level.SEVERE, null, ex);
        }
 }

    private static String checkAttribute(String value1) {
        for (Map.Entry<String, HashSet<String>> entryValue : distinctAttributeValues
                .entrySet()) {
            if (entryValue.getValue().contains(value1)) {
                return entryValue.getKey();
            }
        }
        return null;
    }

    private static String formRule(String rule, String value1, String value2) {
        if (!rule.isEmpty()) {
            rule += "^";
        }

        if (value1.equals(value2)) {
            if (stableAttributes.contains(value2)) {

                rule += "(" + value1 + "=" + value2 + ")";
            } else {
                rule += "(" + value1 + ",->" + value2 + ")";
            }
        } else {

            rule += "(" + value1 + "->" + value2 + ")";
        }

        return rule;
    }

    private  void setStableAttributes(List<String> attributes) {
                        if(userStableAttribute.contains(",")){
                            String[] keys = userStableAttribute.split(",");
                                for(int i=0;i<keys.length;i++){
                                if(checkValid(attributes,keys[i])){
				stableAttributes.addAll(distinctAttributeValues.get(keys[i]));
				attributes.remove(userStableAttribute);
                                }else{
                                    
				printMessage("Invalid Attribute name...\n");
                                }
                                }
 //                           }
                        }else{
                            if(checkValid(attributes,userStableAttribute)){
				stableAttributes.addAll(distinctAttributeValues.get(userStableAttribute));
				attributes.remove(userStableAttribute);
			}else{
				printMessage("Invalid Attribute name...\n");
			}
                        }
			
	}

    private static boolean checkValid(List<String> attributes,String userStableAttribute) {
		if(attributes.contains(userStableAttribute))
			return true;
		else return false;
	}

	private static void setDecisionAttribute(List<String> attributes) {
		if (checkValid(attributes,decisionAttribute)) {
			attributes.remove(decisionAttribute);
			flexibleAttributes = attributes;
			
			HashSet<String> decisionValues = distinctAttributeValues.get(decisionAttribute);
			removeDecisionValueFromAttributes(decisionValues);
			
		}else{
			printMessage("Invalid attrbibute.");
		}
		
	}

	private static void removeDecisionValueFromAttributes(HashSet<String> decisionValues) {
		for(String value : decisionValues){
			HashSet<String> newHash = new HashSet<String>();
			newHash.add(value);
			KddFrame.decisionValues.put(value, attributeValues.get(newHash));
			attributeValues.remove(newHash);
		}
	}
        
        public static void writeFile(String outputString) throws IOException {
             kdd.jLabelLoading.setText("Writing to File");
             kdd.jLabelLoading.setVisible(true);
            try {
			File file = new File("ActionRules.txt");
			FileWriter fileWriter = new FileWriter(file);
			// Wrapping FileWriter to BufferedWriter to improve the efficiency
			BufferedWriter outStream = new BufferedWriter(fileWriter);
			// Writing outputs to file
			outStream.write(outputString);
			// Making sure we close the BufferedWriter to avoid memory leaks.
			outStream.flush();
			outStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
              kdd.jLabelLoading.setText("Program Completed. Please see output in ActionRules.txt");
              kdd.jLabelLoading.setVisible(true);
	}
    // Variables declaration - do not modify                     
    private javax.swing.JButton attrBrowseBtn;
    private java.awt.Label attrValues;
    private java.awt.TextField confidenceTxtField;
    private javax.swing.JButton dataBrowseBtn;
    private java.awt.TextField decisionValFrom;
    private java.awt.TextField decisionValTo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabelLoading;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label label10;
    private java.awt.Label label11;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private java.awt.TextField stableAttrs;
    private javax.swing.JButton submitBtn;
    private java.awt.TextField supportTxtField;
    // End of variables declaration                   


}
